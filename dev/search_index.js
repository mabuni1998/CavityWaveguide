var documenterSearchIndex = {"docs":
[{"location":"references/#References","page":"References","title":"References","text":"","category":"section"},{"location":"references/","page":"References","title":"References","text":"","category":"page"},{"location":"#CavityWaveguide.jl","page":"CavityWaveguide.jl","title":"CavityWaveguide.jl","text":"","category":"section"},{"location":"","page":"CavityWaveguide.jl","title":"CavityWaveguide.jl","text":"DocTestSetup = quote\n    using CavityWaveguide\nend","category":"page"},{"location":"API/#Full-API","page":"API","title":"Full API","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"<style>\n    .content table td {\n        padding-top: 0 !important;\n        padding-bottom: 0 !important;\n    }\n</style>","category":"page"},{"location":"API/#Autogenerated-API-list","page":"API","title":"Autogenerated API list","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"Modules = [CavityWaveguide]\nPrivate = false","category":"page"},{"location":"API/#CavityWaveguide.CavityWaveguideAbsorption","page":"API","title":"CavityWaveguide.CavityWaveguideAbsorption","text":"CavityWaveguideAbsorption{B1,B2} <: CavityWaveguideOperator{B1,B2}\n\nStructure for fast simultaneous cavity creation and waveguide annihilation operator\n\n\n\n\n\n","category":"type"},{"location":"API/#CavityWaveguide.CavityWaveguideEmission","page":"API","title":"CavityWaveguide.CavityWaveguideEmission","text":"CavityWaveguideEmission{B1,B2} <: CavityWaveguideOperator{B1,B2}\n\nStructure for fast simultaneous cavity annihilation and waveguide creation operator\n\n\n\n\n\n","category":"type"},{"location":"API/#CavityWaveguide.CavityWaveguideOperator","page":"API","title":"CavityWaveguide.CavityWaveguideOperator","text":"Abstract type used for operators on acting on a combined WaveguideBasis and cavity basis QuantumOptics.FockBasis\n\n\n\n\n\n","category":"type"},{"location":"API/#CavityWaveguide.TwophotonTimestepView","page":"API","title":"CavityWaveguide.TwophotonTimestepView","text":"TwophotonTimestepView{T}\n\nStructure for viewing slice along same times in twophoton state.\n\n\n\n\n\n","category":"type"},{"location":"API/#CavityWaveguide.TwophotonView","page":"API","title":"CavityWaveguide.TwophotonView","text":"TwophotonView{T} <: AbstractMatrix{T}\n\nStructure for viewing twophoton state as symmetric matrix (only upper triangluar part is stored in memory). Returned from view_twophoton. \n\n\n\n\n\n","category":"type"},{"location":"API/#CavityWaveguide.WaveguideBasis","page":"API","title":"CavityWaveguide.WaveguideBasis","text":"WaveguideBasis(N, times)\n\nBasis for time binned Waveguide where N is the number of photons in the waveguide. Currently restricted to either 1 or 2. Times is timeinterval over which the photon state should be binned.\n\n\n\n\n\n","category":"type"},{"location":"API/#CavityWaveguide.WaveguideCreate","page":"API","title":"CavityWaveguide.WaveguideCreate","text":"WaveguideCreate{N} <: WaveguideOperator\n\nOperator structure for dispatching creation operation on Waveguide state. N is used to dispatch one or two photon routine. \n\n\n\n\n\n","category":"type"},{"location":"API/#CavityWaveguide.WaveguideDestroy","page":"API","title":"CavityWaveguide.WaveguideDestroy","text":"WaveguideDestroy{N} <: WaveguideOperator\n\nOperator structure for dispatching annihilation operation on Waveguide state. N is used to dispatch one or two photon routine. \n\n\n\n\n\n","category":"type"},{"location":"API/#CavityWaveguide.WaveguideOperator","page":"API","title":"CavityWaveguide.WaveguideOperator","text":"Abstract class for WaveguideOperators. Used to dispatch special mul! function.\n\n\n\n\n\n","category":"type"},{"location":"API/#CavityWaveguide.absorption-Union{Tuple{T}, Tuple{WaveguideBasis{T}, QuantumInterface.FockBasis}} where T","page":"API","title":"CavityWaveguide.absorption","text":"absorption(b1::WaveguideBasis{T},b2::FockBasis) where T\nabsorption(b1::FockBasis,b2::WaveguideBasis{T}) where T\n\nCreate CavityWaveguideAbsorption that applies create(b::FockBasis) on QuantumOptics.FockBasis and destroy(b::WaveguideBasis{T}) on WaveguideBasis{T}.  \n\n\n\n\n\n","category":"method"},{"location":"API/#CavityWaveguide.emission-Union{Tuple{T}, Tuple{WaveguideBasis{T}, QuantumInterface.FockBasis}} where T","page":"API","title":"CavityWaveguide.emission","text":"emission(b1::WaveguideBasis{T},b2::FockBasis) where T\nemission(b1::FockBasis,b2::WaveguideBasis{T}) where T\n\nCreate CavityWaveguideEmission that applies destroy(b::FockBasis) on QuantumOptics.FockBasis and create(b::WaveguideBasis{T}) on WaveguideBasis{T}.  \n\n\n\n\n\n","category":"method"},{"location":"API/#CavityWaveguide.get_nsteps-Tuple{WaveguideBasis}","page":"API","title":"CavityWaveguide.get_nsteps","text":"get_nsteps(basis::WaveguideBasis)\nget_nsteps(basis::Basis)\nget_nsteps(basis::CompositeBasis)\n\nReturn nsteps of WaveguideBasis given either a WaveguideBasis or a CompositeBasis containing a WaveguideBasis\n\n\n\n\n\n","category":"method"},{"location":"API/#CavityWaveguide.get_waveguide_basis-Tuple{QuantumInterface.CompositeBasis}","page":"API","title":"CavityWaveguide.get_waveguide_basis","text":"get_waveguide_basis(basis::CompositeBasis)\n\nReturns WaveguideBasis from CompositeBasis.bases\n\n\n\n\n\n","category":"method"},{"location":"API/#CavityWaveguide.get_waveguide_location-Tuple{WaveguideBasis}","page":"API","title":"CavityWaveguide.get_waveguide_location","text":"get_waveguide_location(basis::WaveguideBasis)\nget_waveguide_location(basis::CompositeBasis)\n\nReturn index of WaveguideBasis location in Hilbert space of basis b. Btotal = BW ⊗ BC where BW is a WaveguideBasis and BC some other basis then get_waveguide_location(Btotal) returns 1.  While Btotal = BC ⊗ BW with get_waveguide_location(Btotal) returns 2.\n\n\n\n\n\n","category":"method"},{"location":"API/#CavityWaveguide.get_waveguidetimeindex-Tuple{WaveguideBasis}","page":"API","title":"CavityWaveguide.get_waveguidetimeindex","text":"get_waveguidetimeindex(basis::WaveguideBasis)\nget_waveguidetimeindex(basis::Basis)\nget_waveguidetimeindex(basis::CompositeBasis)\n\nReturn timeindex of WaveguideBasis given either a WaveguideBasis or a CompositeBasis containing a WaveguideBasis\n\n\n\n\n\n","category":"method"},{"location":"API/#CavityWaveguide.onephoton-Tuple{WaveguideBasis, Function, Any, Vararg{Any}}","page":"API","title":"CavityWaveguide.onephoton","text":"onephoton(b::WaveguideBasis,ξ::Function,times,args...,norm=True)\nonephoton(b::WaveguideBasis,ξvec;norm=true)\n\nCreate a onephoton wavepacket of the form W^(ξ) 0 = int_t_0^t_end dt  ξ(t) w^(t) 0. Here t_0=0 and t_end is determined by WaveguideBasis. ξ is a function evaluated as ξ.(times,args...). ξvec is a vector of length: b.nsteps. If norm==true the state is normalized through normalize!.\n\n\n\n\n\n","category":"method"},{"location":"API/#CavityWaveguide.twophoton-Tuple{WaveguideBasis, Function, Any, Vararg{Any}}","page":"API","title":"CavityWaveguide.twophoton","text":"twophoton(b::WaveguideBasis,ξ::Function,times,args...,norm=True)\ntwophoton(b::WaveguideBasis,ξvec::Matrix;norm=true)\n\nCreate a twophoton wavepacket of the form int_t_0^t_end dt int_t_0^t_end dt  ξ(tt) w^(t)w^(t) 0. Here t_0=0 and t_end is determined by WaveguideBasis. ξ is a function evaluated as ξ(t1,t2,args...). ξvec is a matrix of dimension: (b.nsteps,b.nsteps), where ξvec[i,j] = ξ(times[i],times[j]), where times is defined in WaveguideBasis.\n\n\n\n\n\n","category":"method"},{"location":"API/#CavityWaveguide.view_onephoton-Tuple{QuantumOpticsBase.Ket}","page":"API","title":"CavityWaveguide.view_onephoton","text":"view_onephoton(ψ::Ket)\nview_onephoton(ψ::Ket,index)\n\nReturn a view of the onephoton mode ξ(t) given an input state containing a onephoton waveguide state: int_t_0^t_end dt  ξ(t) w^(t) 0 If no index is provided the ground state is returned. Index should follow same form outlined in view_waveguide.\n\nTO DO: PERHAPS CHANGE NAME?\n\n\n\n\n\n","category":"method"},{"location":"API/#CavityWaveguide.view_twophoton-Tuple{QuantumOpticsBase.Ket}","page":"API","title":"CavityWaveguide.view_twophoton","text":"view_twophoton(ψ::Ket)\nview_twophoton(ψ::Ket,index)\n\nReturn a view of the twophoton mode ξ(t_1t_2) given an input state containing a twophoton waveguide state: int_t_0^t_end dt int_t_0^t_end dt  ξ(tt) w^(t)w^(t) 0 If no index is provided the ground state is returned. Index should follow same form outlined in view_waveguide.\n\nTO DO: PERHAPS CHANGE NAME?\n\n\n\n\n\n","category":"method"},{"location":"API/#CavityWaveguide.view_waveguide-Tuple{QuantumOpticsBase.Ket}","page":"API","title":"CavityWaveguide.view_waveguide","text":"view_waveguide(ψ::ket)\nview_waveguide(ψ::ket,index)\n\nView the Waveguide state given a state ψ containing a WaveguideBasis by returning view(reshape(ψ.data,Tuple(ψ.basis.shape)),index...). If no index is provided the ground state is returned. The index provided should be of the form [:,i,j] where (:) is at the location of the WaveguideBasis and i and j are indeces of other basises. See example: \n\ntimes=0:0.1:10\nbw = WaveguideBasis(2,times)\nbc1 = FockBasis(2)\nbc2 = FockBasis(2)\nψ_waveguide = onephoton(bw,x->1)\nψ_total = ψ_waveguide ⊗ fockstate(bc1,1) ⊗ fockstate(bc2,1)\nψ_view = view_waveguide(ψ_total)\nψ_view_index = view_waveguide(ψ_total,[:,1,1])\nψ_view==ψ_view_index\n\n\n\n\n\n","category":"method"},{"location":"API/#CavityWaveguide.waveguide_evolution-Tuple{Any, Any, Any}","page":"API","title":"CavityWaveguide.waveguide_evolution","text":"waveguide_evolution(tspan, psi0, H; fout)\n\nIntegrate time-dependent Schroedinger equation to evolve states or compute propagators.\n\nArguments\n\ntspan: Vector specifying the points of time for which output should be displayed.\npsi0: Initial state vector can only be a ket.\nH: Operator containing a WaveguideOperator either through a LazySum or LazyTensor.\nfout=nothing: If given, this function fout(t, psi) is called every time step. Example: fout(t,psi) = expect(A,psi) will return the epectation value of A at everytimestep.   ATTENTION: The state psi is neither normalized nor permanent! It is still in use by the ode solver and therefore must not be changed.\n\nOutput\n\nif fout=nothing the output of the solver will be the state ψ at the last timestep. \nif fout is given a tuple with the state ψ at the last timestep and the output of fout is given. If fout returns a tuple the tuple will be flattened.\n\nExample fout(t,psi) = (expect(A,psi),expect(B,psi)) will result in  a tuple (ψ, ⟨A(t)⟩,⟨B(t)⟩), where ⟨A(t)⟩ is a vector with the expectation value of A as a function of time.\n\n\n\n\n\n","category":"method"},{"location":"API/#CavityWaveguide.zerophoton-Tuple{WaveguideBasis}","page":"API","title":"CavityWaveguide.zerophoton","text":"zerophoton(bw::WaveguideBasis)\n\nCreate a waveguide vacuum state |0⟩\n\n\n\n\n\n","category":"method"}]
}
